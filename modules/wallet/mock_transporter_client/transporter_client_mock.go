// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/scpcorp/ScPrime/modules/wallet (interfaces: TransporterClient)
//
// Generated by this command:
//
//	mockgen -destination ./mock_transporter_client/transporter_client_mock.go -package mock_transporter_client . TransporterClient
//

// Package mock_transporter_client is a generated GoMock package.
package mock_transporter_client

import (
	context "context"
	reflect "reflect"

	transporter "gitlab.com/scpcorp/spf-transporter"
	gomock "go.uber.org/mock/gomock"
)

// MockTransporterClient is a mock of TransporterClient interface.
type MockTransporterClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransporterClientMockRecorder
}

// MockTransporterClientMockRecorder is the mock recorder for MockTransporterClient.
type MockTransporterClientMockRecorder struct {
	mock *MockTransporterClient
}

// NewMockTransporterClient creates a new mock instance.
func NewMockTransporterClient(ctrl *gomock.Controller) *MockTransporterClient {
	mock := &MockTransporterClient{ctrl: ctrl}
	mock.recorder = &MockTransporterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransporterClient) EXPECT() *MockTransporterClientMockRecorder {
	return m.recorder
}

// CheckAllowance mocks base method.
func (m *MockTransporterClient) CheckAllowance(arg0 context.Context, arg1 *transporter.CheckAllowanceRequest) (*transporter.CheckAllowanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAllowance", arg0, arg1)
	ret0, _ := ret[0].(*transporter.CheckAllowanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAllowance indicates an expected call of CheckAllowance.
func (mr *MockTransporterClientMockRecorder) CheckAllowance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAllowance", reflect.TypeOf((*MockTransporterClient)(nil).CheckAllowance), arg0, arg1)
}

// CheckSolanaAddress mocks base method.
func (m *MockTransporterClient) CheckSolanaAddress(arg0 context.Context, arg1 *transporter.CheckSolanaAddressRequest) (*transporter.CheckSolanaAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSolanaAddress", arg0, arg1)
	ret0, _ := ret[0].(*transporter.CheckSolanaAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSolanaAddress indicates an expected call of CheckSolanaAddress.
func (mr *MockTransporterClientMockRecorder) CheckSolanaAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSolanaAddress", reflect.TypeOf((*MockTransporterClient)(nil).CheckSolanaAddress), arg0, arg1)
}

// PreminedList mocks base method.
func (m *MockTransporterClient) PreminedList(arg0 context.Context, arg1 *transporter.PreminedListRequest) (*transporter.PreminedListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreminedList", arg0, arg1)
	ret0, _ := ret[0].(*transporter.PreminedListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreminedList indicates an expected call of PreminedList.
func (mr *MockTransporterClientMockRecorder) PreminedList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreminedList", reflect.TypeOf((*MockTransporterClient)(nil).PreminedList), arg0, arg1)
}

// SubmitScpTx mocks base method.
func (m *MockTransporterClient) SubmitScpTx(arg0 context.Context, arg1 *transporter.SubmitScpTxRequest) (*transporter.SubmitScpTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitScpTx", arg0, arg1)
	ret0, _ := ret[0].(*transporter.SubmitScpTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitScpTx indicates an expected call of SubmitScpTx.
func (mr *MockTransporterClientMockRecorder) SubmitScpTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitScpTx", reflect.TypeOf((*MockTransporterClient)(nil).SubmitScpTx), arg0, arg1)
}

// TransportStatus mocks base method.
func (m *MockTransporterClient) TransportStatus(arg0 context.Context, arg1 *transporter.TransportStatusRequest) (*transporter.TransportStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransportStatus", arg0, arg1)
	ret0, _ := ret[0].(*transporter.TransportStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransportStatus indicates an expected call of TransportStatus.
func (mr *MockTransporterClientMockRecorder) TransportStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransportStatus", reflect.TypeOf((*MockTransporterClient)(nil).TransportStatus), arg0, arg1)
}
